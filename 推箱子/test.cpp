#include "画图形.h"
#include<graphics.h>
#include<stdio.h>
#define KEY_DOWN(vk_c) (GetAsyncKeyState(vk_c)&0x8000)
void draw_map(int a[10][10])//将地图画出，使用数组储存地图信息，0为空白，1为墙壁，2为箱子，3为人，4为目标点
{
	int y,x;
	for ( y = 0; y < 10; y++)
	{
		for (x = 0; x < 10; x++)
		{
			if (a[y][x]==1)
			{
				wall(x,y);
			}
			else if (a[y][x] == 2)
			{
				box(x,y);
			}
			else if (a[y][x] == 3)
			{
				people(x,y);
			}
			else if (a[y][x] == 4)
			{
				point(x,y);
			}
		}
	}
}
void change_map(int b,int a[10][10])//更换地图数据
{
	int a1[10][10] = {
		0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,0,1,1,1,1,0,
		0,1,1,1,2,0,2,4,1,0,
		0,1,4,0,2,3,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0,0,0
	};
	int a2[10][10] = {
		1,1,1,1,1,0,0,0,0,0,
		1,0,0,0,1,0,0,0,0,0,
		1,0,2,3,1,0,1,1,1,0,
		1,0,2,2,1,0,1,4,1,0,
		1,1,1,0,1,1,1,4,1,0,
		0,1,1,0,0,0,0,4,1,0,
		0,1,0,0,0,1,0,0,1,0,
		0,1,0,0,0,1,1,1,1,0,
		0,1,1,1,1,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0
	};
	int a3[10][10] = {
		0,0,0,0,0,0,0,0,0,1,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,2,1,1,1,1,0,
		0,1,1,1,3,0,2,4,1,0,
		0,1,4,2,0,0,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0,0,0
	};
	int a4[10][10] = {
		0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,2,1,1,1,1,0,
		0,1,1,1,3,0,2,4,1,0,
		0,1,4,2,0,0,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		1,0,0,0,0,0,0,0,0,0
	};
	int a5[10][10] = {
		0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,2,1,1,1,1,0,
		0,1,1,1,3,0,2,4,1,0,
		0,1,4,2,0,0,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0,0,1
	};
	int a6[10][10] = {
		0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,2,1,1,1,1,0,
		0,1,1,1,3,0,2,4,1,0,
		0,1,4,2,0,0,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0,0,0
	};
	int a7[10][10] = {
		0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,2,1,1,1,1,0,
		0,1,1,1,3,0,2,4,1,0,
		0,1,4,2,0,0,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0,0,0
	};
	int a8[10][10] = {
		0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,2,1,1,1,1,0,
		0,1,1,1,3,0,2,4,1,0,
		0,1,4,2,0,0,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0,0,0
	};
	int a9[10][10] = {
		0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,2,1,1,1,1,0,
		0,1,1,1,3,0,2,4,1,0,
		0,1,4,2,0,0,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0,0,0
	};
	int a10[10][10] = {
		0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,0,0,0,0,
		0,0,0,1,4,1,0,0,0,0,
		0,0,0,1,2,1,1,1,1,0,
		0,1,1,1,3,0,2,4,1,0,
		0,1,4,2,0,0,1,1,1,0,
		0,1,1,1,1,2,1,0,0,0,
		0,0,0,0,1,4,1,0,0,0,
		0,0,0,0,1,1,1,0,0,0,
		0,0,0,0,0,0,0,0,0,0
	};
	int *p=&a[0][0];
	switch (b)
	{
	case 1:
		p = &a1[0][0]; break;
	case 2:
		p = &a2[0][0]; break;
	case 3:
		p = &a3[0][0]; break;
	case 4:
		p = &a4[0][0]; break;
	case 5:
		p = &a5[0][0]; break;
	case 6:
		p = &a6[0][0]; break;
	case 7:
		p = &a7[0][0]; break;
	case 8:
		p = &a8[0][0]; break;
	case 9:
		p = &a9[0][0]; break;
	case 10:
		p = &a10[0][0];break;
	}
	int y , x ;
	for (y=0; y<10; y++)
	{
		for (x = 0; x<10; x++)
		{
			a[y][x] = *p;
			p++;
		}

	}
	
}
void getpeoplexy(int a[10][10],int peoplexy[2])//获取人物所在坐标
{
	for (int y = 0; y < 10; y++)
	{
		for (int x = 0; x < 10; x++)
		{
			if (a[y][x]==3)
			{
				peoplexy[0] = y;
				peoplexy[1] = x;
			}
		}
	}
}
void getpointxy(int a[10][10], int pointxy[10][10])//获取目标点所在坐标
{
	for (int y = 0; y < 10; y++)
	{
		for (int x = 0; x < 10; x++)
		{
			if (a[y][x] == 4)
			{
				pointxy[y][x] = 1;
			}
		}
	}
}
void getboxxy(int a[10][10], int boxxy[10][10])//获取箱子所在坐标
{
	for (int y = 0; y < 10; y++)
	{
		for (int x = 0; x < 10; x++)
		{
			if (a[y][x] == 2)
			{
				boxxy[y][x] = 1;
			}
		}
	}
}
int key()//追踪键盘输入信息
{
		if (KEY_DOWN(VK_DOWN))
		{
			return 1;
		}
		else if (KEY_DOWN(VK_UP))
		{
			return 2;
		}
		else if (KEY_DOWN(VK_LEFT))
		{
			return 3;
		}
		else if (KEY_DOWN(VK_RIGHT))
		{
			return 4;
		}
		else if (KEY_DOWN(VK_ESCAPE))//esc键退出游戏
		{
			return 5;
		}
		else if (KEY_DOWN(VK_SPACE))//space键回退一步
		{
			return 6;
		}
}
void judge(int a, int map[10][10], int peoplexy[2],int boxxy[10][10])
{
	int y = peoplexy[0];
	int x = peoplexy[1];
	switch (a)
	{
	case 1://向下
		if (map[y+1][x] == 0)//目标方向为空
		{
			clean(x, y);
			people(x,y+1);
			peoplexy[0] = y + 1;
			map[y][x] = 0;
			map[y + 1][x] = 3;
		}
		else if (map[y+1][x] == 2 && map[y+2][x] != 1)//目标方向为箱子，箱子旁边不为墙壁
		{
			clean(x, y);
			clean(x, y+1);
			people(x, y+1);
			box(x, y+2);
			boxxy[y+1][x] = 0;
			boxxy[y+2][x] = 1;
			map[y + 2][x] = 2;
			map[y][x] = 0;
			map[y + 1][x] = 3;
			peoplexy[0] = y + 1;
		}
		break;
	case 2://向上
		if (map[y - 1][x] == 0)//目标方向为空
		{
			clean(x, y);
			people(x, y - 1);
			peoplexy[0] = y - 1;
			map[y][x] = 0;
			map[y - 1][x] = 3;
		}
		else if (map[y - 1][x] == 2 && map[y - 2][x] != 1)//目标方向为箱子，箱子旁边不为墙壁
		{
			clean(x, y);
			clean(x, y - 1);
			people(x, y - 1);
			box(x, y - 2);
			boxxy[y - 1][x] = 0;
			boxxy[y - 2][x] = 1;
			map[y - 2][x] = 2;
			map[y][x] = 0;
			map[y - 1][x] = 3;
			peoplexy[0] = y - 1;
		}
		break;
	case 3://向左
		if (map[y][x-1] == 0)//目标方向为空
		{
			clean(x, y);
			people(x-1, y);
			peoplexy[1] = x-1;
			map[y][x] = 0;
			map[y][x - 1] = 3;
		}
		else if (map[y][x-1] == 2 && map[y][x-2] != 1)//目标方向为箱子，箱子旁边不为墙壁
		{
			clean(x, y);
			clean(x-1, y);
			people(x-1, y);
			box(x-2, y);
			boxxy[y][x-1] = 0;
			boxxy[y][x-2] = 1;
			map[y][x] = 0;
			map[y][x-1] = 3;
			map[y][x-2] = 2;
			peoplexy[1] = x-1;
		}
		break;
	case 4://向右
		if (map[y][x + 1] == 0)//目标方向为空
		{
			clean(x, y);
			people(x + 1, y);
			peoplexy[1] = x + 1;
			map[y][x] = 0;
			map[y][x + 1] = 3;
		}
		else if (map[y][x + 1] == 2 && map[y][x + 2] != 1)//目标方向为箱子，箱子旁边不为墙壁
		{
			clean(x, y);
			clean(x + 1, y);
			people(x + 1, y);
			box(x + 2, y);
			boxxy[y][x + 1] = 0;
			boxxy[y][x + 2] = 1;
			map[y][x] = 0;
			map[y][x + 1] = 3;
			map[y][x + 2] = 2;
			peoplexy[1] = x + 1;
		}
		break;
	case 5:
		break;
	case 6:
		break;
	}
}
int judge1(int boxxy[10][10], int pointxy[10][10])
{
	for (int y = 0; y < 10; y++)
	{
		for (int x = 0; x < 10; x++)
		{
			if (boxxy[y][x] != pointxy[y][x])
			{
				return 1;
			}
		}
	}
	return 0;
}

int main()
{
	initgraph(640, 500);
	int num = 1;                     //关卡计数
	int map[10][10] = { 0 };         //存放地图数据
	int peoplexy[2] = { 0 };		 //存放人物所在坐标
	int pointxy[10][10] = { 0 };		 //存放坐标点所在位置
	int boxxy[10][10] = { 0 };		 //存放箱子所在位置
	while (1)
	{
		int k = 1;
		change_map(num,map);		//更换地图
		cleardevice();				//清空屏幕，当前坐标点重置至(0,0)；
		draw_map(map);				//重新画出地图
		getpeoplexy(map,  peoplexy);//获取当前地图人物所在坐标
		getpointxy(map, pointxy);     //获取当前地图目标点所在坐标
		getboxxy(map, boxxy);			//获取当前地图箱子所在坐标
		while (k)					//游戏进行
		{
			int s = key();			//接收键盘操作
			judge(s, map, peoplexy, boxxy);	//判断键盘操作并执行执行
			Sleep(100);					
			k = judge1(boxxy, pointxy);						//判断游戏是否完成
			
		}
		num++;						//关卡完成后关卡数+1
		
	}
	closegraph();

}